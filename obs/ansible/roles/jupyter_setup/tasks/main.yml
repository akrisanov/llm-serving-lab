---
- name: Install Python development tools
  ansible.builtin.apt:
    name:
      - python3-pip
      - python3-venv
      - python3-dev
      - git
      - curl
    state: present
    update_cache: true

- name: Download uv installer
  ansible.builtin.get_url:
    url: https://astral.sh/uv/install.sh
    dest: /tmp/uv-install.sh
    mode: "0755"
  when: not ansible_check_mode

- name: Install uv (fast Python package manager)
  ansible.builtin.command: /tmp/uv-install.sh
  args:
    creates: /root/.cargo/bin/uv
  environment:
    CARGO_HOME: /root/.cargo
  become: true

- name: Create jupyter user
  ansible.builtin.user:
    name: jupyter
    system: true
    shell: /bin/bash
    home: /opt/jupyter
    create_home: true

- name: Create jupyter directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: jupyter
    group: jupyter
    mode: "0755"
  loop:
    - /opt/jupyter
    - /opt/jupyter/config
    - /opt/jupyter/logs

- name: Create Python virtual environment with uv
  ansible.builtin.command: uv venv /opt/jupyter/venv --python python3
  args:
    creates: /opt/jupyter/venv
  become: true

- name: Set ownership of venv to jupyter user
  ansible.builtin.file:
    path: /opt/jupyter/venv
    owner: jupyter
    group: jupyter
    recurse: true
  become: true

- name: Remove existing project directory
  ansible.builtin.file:
    path: /opt/llm-serving-lab
    state: absent
  become: true

- name: Clone llm-serving-lab project
  ansible.builtin.git:
    repo: "https://github.com/akrisanov/llm-serving-lab.git"
    dest: /opt/llm-serving-lab
    version: "{{ project_branch | default('main') }}"
  become: true

- name: Set ownership of project directory
  ansible.builtin.file:
    path: /opt/llm-serving-lab
    owner: jupyter
    group: jupyter
    recurse: true
  become: true

- name: Install experiments dependencies with uv from pyproject.toml
  ansible.builtin.shell: |
    cd /opt/llm-serving-lab
    /root/.local/bin/uv pip install --python /opt/jupyter/venv/bin/python -e ".[experiments,loadgen]"
  args:
    creates: /opt/jupyter/venv/lib/python3.10/site-packages/jupyter
  become: true

- name: Set ownership of venv to jupyter user (after uv install)
  ansible.builtin.file:
    path: /opt/jupyter/venv
    owner: jupyter
    group: jupyter
    recurse: true
  become: true

- name: Generate Jupyter password hash
  ansible.builtin.shell: |
    /opt/jupyter/venv/bin/python -c "from jupyter_server.auth import passwd; print(passwd('{{ jupyter_password }}'))"
  register: jupyter_setup_password_hash_result
  when: jupyter_password is defined
  changed_when: false
  become: true

- name: Set default Jupyter password hash if not provided
  ansible.builtin.set_fact:
    jupyter_setup_password_hash: >-
      {{ jupyter_setup_password_hash_result.stdout if jupyter_password is defined
         else 'argon2:$argon2id$v=19$m=10240,t=10,p=8$8wvBBhTaLlhYhEyf0ZLGww$pJe8gBQqLGfJO0BLJ7Xvx5YPQfYEqG9dTqxq8oNMQfQ' }}

- name: Generate Jupyter token
  ansible.builtin.shell: |
    /opt/jupyter/venv/bin/python -c "import secrets; print(secrets.token_urlsafe(48))"
  register: jupyter_setup_token_result
  when: jupyter_token is not defined
  changed_when: false
  become: true

- name: Set Jupyter token
  ansible.builtin.set_fact:
    jupyter_setup_token: "{{ jupyter_setup_token_result.stdout if jupyter_token is not defined else jupyter_token }}"

- name: Create Jupyter configuration file
  ansible.builtin.template:
    src: "{{ config_path | default(playbook_dir + '/../../config') }}/jupyter_notebook_config.py.j2"
    dest: /opt/jupyter/config/jupyter_notebook_config.py
    owner: jupyter
    group: jupyter
    mode: "0644"
  notify:
    - Restart jupyter

- name: Create Jupyter systemd service
  ansible.builtin.template:
    src: jupyter.service.j2
    dest: /etc/systemd/system/jupyter.service
    mode: "0644"
  notify:
    - Reload systemd
    - Restart jupyter

- name: Enable and start Jupyter service
  ansible.builtin.systemd:
    name: jupyter
    enabled: true
    state: started
    daemon_reload: true
