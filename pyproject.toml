[project]
name = "llm-serving-lab"
version = "0.1.0"
description = "A long-term lab for LLM serving experiments with comprehensive monitoring"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
authors = [{ name = "akrisanov" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = ["ansible>=7.0.0"]

[project.optional-dependencies]
dev = ["ansible-lint>=6.0.0", "yamllint>=1.28.0", "ruff>=0.6.0"]

lint = ["ansible-lint>=6.0.0", "yamllint>=1.28.0", "ruff>=0.6.0"]

monitoring = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "nvidia-ml-py>=12.0.0",
    "psutil>=5.9.0",
    "requests>=2.31.0",
]

loadgen = ["httpx>=0.25.0", "pydantic>=2.0.0"]

experiments = [
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
    "ipywidgets>=8.0.0",
]

[project.urls]
Homepage = "https://github.com/akrisanov/llm-serving-lab"
Repository = "https://github.com/akrisanov/llm-serving-lab"

# No build system needed - this is a dependency management only project

[dependency-groups]
dev = ["ansible-lint>=6.0.0", "yamllint>=1.28.0", "ruff>=0.6.0"]


[tool.yamllint]
extends = "default"

[tool.yamllint.rules.line-length]
max = 120

[tool.yamllint.rules.comments-indentation]
disable = true

[tool.ansible-lint]
exclude_paths = [".cache/", ".github/", ".ansible/"]
use_default_rules = true
verbosity = 1

# Ruff configuration
[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10+
target-version = "py310"

# Include src directory and CLI script
extend-include = ["src/**/*.py", "metrics-cli.py"]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Additionally enable:
# - isort (I) - import sorting
# - pyupgrade (UP) - upgrade syntax for newer Python versions
# - flake8-bugbear (B) - find likely bugs
# - flake8-simplify (SIM) - simplify code
# - flake8-comprehensions (C4) - improve comprehensions
select = ["E", "F", "I", "UP", "B", "SIM", "C4"]

ignore = [
    # Allow non-lowercase variable names (for metrics like gpu_0_utilization)
    "N806",
    # Allow `print` statements (useful for CLI)
    "T201",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
# Sort imports
known-first-party = ["monitoring", "deployment", "utils"]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
# CLI script can have print statements and longer lines
"metrics-cli.py" = ["T201", "E501"]
# Templates can have different style requirements
"**/*template*" = ["E501", "F401"]
# Test files can have asserts and unused imports
"**/test_*.py" = ["S101", "F401", "F811"]
